{
  "Go: Max": {
    "scope": "go", "prefix": "Max",
    "description": "Returns maximum of 2 values",
    "body": [
      "func max(a, b ${1:int}) ${1:int} {",
      "  if a > b {",
      "    return a",
      "  }",
      "  return b",
      "}", "$0"
    ],
  },
  "Go: Min": {
    "scope": "go", "prefix": "Min",
    "description": "Returns minimum of 2 values",
    "body": [
      "func min(a, b ${1:int}) ${1:int} {",
      "  if a < b {",
      "    return a",
      "  }",
      "  return b",
      "}", "$0"
    ],
  },
  "Go: Gcd": {
    "scope": "go", "prefix": "Gcd",
    "description": "Returns Greatest Common Divisor of 2 values",
    "body": [
      "func gcd(x, y ${1:int}) (${1:int}) {",
      "  if y == 0 {",
      "    return x",
      "  }",
      "  return gcd(y, x%y)",
      "}", "$0"
    ],
  },
  "Go: Abs": {
    "scope": "go", "prefix": "Abs",
    "description": "Return absolute value of a numeric value",
    "body": [
      "func abs(x ${1:int}) (${1:int}) {",
      "  if x < 0 {",
      "    return -x",
      "  }",
      "  return x",
      "}", "$0"
    ],
  },
  "Go: ScanArr": {
    "scope": "go", "prefix": "ReadArr",
    "description": "Reads an array",
    "body": [
      "for i := 0; i < ${1:n}; i++ {",
      "  scan(&${2:a}[i])",
      "}", "$0",
    ]
  },
  "Go: PrintArr": {
    "scope": "go", "prefix": "PrintArr",
    "description": "Prints an array space separated in one line",
    "body": [
      "for i := 0; i < ${1:n}; i++ {",
      "  if i > 0 {",
      "    printf(\" \")",
      "  }",
      "  printf(\"%${2:d}\", ${3:a}[i])",
      "}",
      "printf(\"\\n\")", "$0",
    ]
  },
  "Go: Unique": {
    "scope": "go", "prefix": "Unique",
    "description": "Removes contiguous equal elements from slice and returns the new slice",
    "body": [
      "func unique(a []${1:int}) []${1:int} {",
      "  j := 1",
      "  for i := 1; i < len(a); i++ {",
      "    if a[i] != a[i-1] {",
      "      a[j] = a[i]",
      "      j++",
      "    }",
      "  }",
      "  return a[:j]",
      "}", "$0",
    ]
  }
}
#!/bin/sh

ConfigFile=config
Problem=""
CaseId=""
Debug="false"
RunAllTests="false"
Lang="go"

# Read default values for Problem and CaseId from settings file
if [ -f "$ConfigFile" ]; then
  eval "$(cat $ConfigFile)"
fi

ProblemGiven="false"
SetProblem() {
  if [ "$ProblemGiven" = "true" ]; then
    echo "ERROR: Problem given multiple times, but it must be given at most once."
    exit 1
  else
    Problem="$1"
  fi
  ProblemGiven="true"
}

CaseIdGiven="false"
SetCaseId() {
  if [ "$CaseIdGiven" = "true" ]; then
    echo "ERROR: Problem given multiple times, but it must be given at most once."
    exit 1
  else
    CaseId="$1"
  fi
  CaseIdGiven="true"
}

LanguageGiven="false"
SetLanguage() {
  if [ "$LanguageGiven" = "true" ]; then
    echo "ERROR: Language given multiple times, but it must be given at most once."
    exit 1
  else
    Lang="$1"
  fi
  LanguageGiven="true"
}

while [ $# -gt 0 ]; do
  case "$1" in
    
    # Problem
    -p|--problem)
      shift
      SetProblem "$1"
      shift
      ;;

    # Test case ID
    -c|--case)
      shift
      SetCaseId "$1"
      shift
      ;;

    # Debug flag
    -d|--debug)
      shift
      Debug="true"
      ;;

    # Run all cases
    -a|--all)
      shift
      RunAllTests="true"
      ;;

    # Show manual
    -h|--help)
      cat docs/run-manual.txt
      exit 0
      ;;

    -l|--lang)
      shift
      SetLanguage "$1"
      shift
      ;;

    # Some other parameter
    *)
      if [ "$CaseIdGiven" = "false" ]; then
        SetCaseId "$1"
        shift
      else
        echo "ERROR: Could not parse parameter: $1"
        exit 1;
      fi
      ;;
  esac
done  

if [ -z "$Problem" ]; then
  cat docs/run-problem-required.txt
  exit 1
fi

if [ -z "$CaseId" ]; then
  CaseId="0"
fi

if ! echo "$Lang" | grep -Eq "^cpp|go$" ; then
  echo "ERROR: Invalid language $Lang"
  exit 1
fi

echo "Lang=$Lang" > "$ConfigFile"
echo "Problem=$Problem" >> "$ConfigFile"
echo "CaseId=0" >> "$ConfigFile"

SolutionFile="workspace/$Problem/main.$Lang"

if [ "$Lang" = "cpp" ]; then
  if cmp --silent -- "$SolutionFile" "build/last_compiled.txt"; then
    echo "No changes on $SolutionFile. Re using compiled binary..."
    SolutionFile="build/solution"
  else
    echo "Compiling cpp file: $SolutionFile"
    gcc "$SolutionFile" -o "build/solution" -std=c++20 -Wall -Wextra -O2 -Wshadow -pedantic -Wformat=2 -Wfloat-equal -Wconversion -Wcast-qual -Wcast-align -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC  -fsanitize=address -fno-sanitize-recover -fstack-protector
    cp "$SolutionFile" "build/last_compiled.txt"
    SolutionFile="build/solution"
  fi
fi

if ! test -f "$SolutionFile"; then
  echo "Solution file not found: $SolutionFile"
  exit 0
fi

RunSolution() {
  if [ "$Lang" = "go" ]; then
    go run "$SolutionFile"
  else
    ./$SolutionFile
  fi
}

RunTestCase() {
  InputFile="workspace/$Problem/cases/$CaseId.in"
  OutputFile="workspace/$Problem/cases/$CaseId.txt"
  ExpectedOutputFile="workspace/$Problem/cases/$CaseId.out"

  if [ ! -f "$InputFile" ]; then
    echo "Input file not found: ${InputFile}"
    exit 1
  fi

  if [ -f "$OutputFile" ]; then
    rm "$OutputFile"
  fi

  RunSolution <"$InputFile" | cat > "$OutputFile"

  if test -f "$ExpectedOutputFile"; then
    if cmp --silent -- "$OutputFile" "$ExpectedOutputFile"; then
      echo "Case $CaseId: Correct! :D"
    else
      echo "Case $CaseId: Wrong :("
    fi
  else
    echo "Case $CaseId: No answer file"
  fi
}

if [ "$Debug" = "true" ]; then
  InputFile=workspace/$Problem/cases/$CaseId.in
  time RunSolution < "$InputFile"
elif [ "$RunAllTests" = "false" ]; then
  echo "Testing problem $Problem against test case $CaseId."
  RunTestCase
  echo "----- OUTPUT START -----"
  cat "workspace/$Problem/cases/$CaseId.txt"
  echo "------ OUTPUT END ------"
else
  echo "Testing problem $Problem against all test cases."
  CaseId=0
  while [ -f "workspace/$Problem/cases/$CaseId.in" ];
  do
    RunTestCase
    CaseId=$((CaseId+1))
  done
fi
